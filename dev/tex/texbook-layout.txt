

over (fraction) ###

the numerator and denominator are placed at a fixed position relative to the baseline (not axis!).
the denominators target-position is downwards for positive values!

this position depends on the current style: 
num1 and denom1: if display-style
num2 and denom2: otherwise

there is a certain axis-height and rule-thickness. 
the minimal allowed spacing between both nodes and the rule-stroke is 3*rulethickness if 
display-style and 1*rulethickness if inline-style. 
the spacing between numerator and the rule-stroke will be the distance from the bottom
of the numerator to the top of the rule (axisheight + rule-thickness / 2).

position the numerator and denominator, but if the spacing is violated, shift the nodes up/down 
to preserve the spacing. 

position of numerator: top(rule) + max(position(num) - depth(num) - top(rule), halfRuleThickness)



atop (binomial) ###

minimal-spacing: 7*default_rule_thickness if display-style, otherwise: 3*default_rule_thickness
use the same target-positions as in fractions. 
if the spacing between the nodes is smaller than the minimal-spacing, shift both nodes by the 
same amount until the spacing is correct.



script ###

the positions of subscript and superscript are relative to the 
origin of the nucleus.
margins can be added by increasing the width of the enclosing script-node.
heightShift => u
depthShift => v
sub1 => fixed y when no superscript (usual)
sub2 => fixed y when superscript (lower than usual?)
sup3 => fixed y when cramped (lower than usual?)
sup1 => fixed y when display (higher than usual?)
sup2 => otherwise (usual)


if nucleus is char:
    heightShift = 0
    depthShift = 0
else 
    heightShift = height(nucleus) - sup_drop
    depthShift = depth(nucleus) + sub_drop

if (subscript exists):
    style(subscript) = scriptDown(style(script))
    positionX(subscript) = width(nucleus);
    marginRight(subscript) = scriptspace
    if (subscript only): 
        //it must be positioned at least at the bottom of the nucleus with a drop of sub_drop
        //it must drop at least sub1
        //the top of the subscript must not extend above 4/5 of the x_height,
        positionY(subscript) = max(depthShift, sub1, height(subscript) - 4/5 * x_height)
    else: 
        //similar as above but the x_height alignment is missing
        positionY(subscript) = max(depthShift, sub2)

if (superscript exists):
    style(superscript) = scriptUp(style(script))
    marginRight(superscript) = scriptspace

    positionX(superscript) = italicCorrection(nucleus)
    supPosition = if isCramped(style) : sup3, if isDisplay(style) : sup1, otherwise : sup2
    positionY(superscript) = max(heightShift, supPosition, depth(superscript) + 1/4 * x_height)

if (subscript and superscript exist both):
    if (spaceBetween(positionY(superscript) and positionY(subscript)) < 4 * default_rule_thickness):
        adjust depthShift so that the space between superscript and subscript is 4 * default_rule_thickness

    if (bottom(superscript) < 4/5 * x_height):
        shift both the superscript and subscript up so that bottom(superscript) = 4/5 * x_height

